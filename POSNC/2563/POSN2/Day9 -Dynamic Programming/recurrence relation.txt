
1.Friends Pairing
	ให้ f(n) แทนจำนวนวิธีทั้งหมดในการจับคู่เพื่อน n คนตามเงื่อนไข สมมติมีการจับคู่แล้ว n-1 คน และกำลังจะใส่ คนที่ n เข้าไป
	ให้ a(n) แทนนร.คนที่ n
		กรณี1: a(n) ไม่มีคู่
	จำนวนวิธีทั้งหมดที่เป็นไปได้คือ f(n-1) ->[จัด n-1 คนก่อน แล้วเอา a(n) แยกอยู่คนเดียวไม่มีคู่]
		กรณี2: a(n) มีคู่ สมมติคู่กับ a(k)
	จำนวนวิธีทั้งหมดที่เป็นไปได้คือ (n-1)*f(n-2) ก็คือการที่ a(n) จะคู่กับ a(k) ได้นั้น 	    a(k) ก็ต้องไม่มีคู่ด้วย จำนวนวิธีของ a(k) ซึ่ง 1<=k<=n-1 ที่จะไม่มีคู่เลยจึงเป็น f(n-2) [ ทำนองเดียวกันกับ n ที่ไม่มีคู่ในกรณี1]
	แต่เนื่องจาก 1<=k<=n-1 	k สามารถเป็นได้ตั้งแต่ 1 ถึง n-1 ดังนั้นคำตอบของกรณีสองจึงเป็น  (n-1)*f(n-2) 
	
	พิจารณา ที่ค่า n=1; พบว่า f(n)=1-> a1
		      n=2;พบว่า f(n)=2-> a1,a2 หรือ a1 | a2

	จะเห็นได้ว่าตัวสมการคล้ายกันกับลำดับ fibonacci ต่างกันแค่สัมประสิทธิ์ของตัวที่เรียกค่า ดังนั้น time complexity ในการแก้ปัญหา recurrence relation นี้จะเป็น O(n)

2.Subset Sum
	ให้ เซต  A = {x1,x2,x3,...,xn}
	ให้ s(i,j) แทนค่าความจริงว่า ตั้งแต่สมาชิกตัวที่ 1 ถึง i มีสับเซตที่มีผลรวมเท่ากับ j ไหม
	พบว่า s(i,j)=s(i-1,j-xi) || s(i-1,j) ; j>=xi
	          s(i,j)=s(i-1,j) ; j<xi
	และ s(0,j)=false สำหรับทุก j!=0 และ s(i,0)=true
	
	พิจารณาที่ base case ของ relation นี้ ให้ซับเซตใดๆแทนด้วย s0
	สำหรับ ที่มีสมาชิก 0 ตัว เห็นได้ชัดว่า s0 จะไม่มีทางที่จะมีผลรวมเป็น จำนวนเต็มบวก j จึงได้ s(0,j)=false สำหรับทุก j!=0 
	และสำหรับ s0 ที่มีสมาชิก i ตัว ที่ต้องการผลรวมเป็น 0 พบว่าเป็นไปได้เสมอ คือเกิดจากการรวมผลรวมในเซตว่าง ซึ่งเป็นสับเซตของ s0 เสมอ จึงได้ และ s(i,0)=true
	
	พิจารณาที่ general case 
	จะคิดว่าเซตนี้ [แทนด้วย s(i,.j)] มีผลรวมเป็น j ไหม โดยการอิงถึงเซตก่อนๆที่เป็นซับเซตของมัน 
	1.สมมติตั้งแต่ x1 - xi-1 มีซับเซตที่มีผลรวมเป็น j ก็จะได้ว่า s(i-1,j) = true ซึ่งเมื่อพิจารณาx1-xi ก็จะทำให้ได้ว่ามีซับเซตที่เกิดผลรวมเป็น j แน่นอน เพราะ {x1,x2,x3,...,xi-1} เป็นสับเซตของ {x1,x2,x3,...,xi} (ไม่เลือก xi มารวมกับผลบวก) 
	2.แต่ถ้าสมมติตั้งแต่ สมาชิกตัวที่ 1 - i-1 ไม่มีซับเซตที่มีผลรวมเป็น j ถ้าจะให้สมาชิกตัวที่ 1-i มีซับเซตซึ่งมีผลรวม j ก็พบว่าจะต้องได้ s(i-1,j-xi) = true คือต้องมีสับเซตของ x1-xi-1 ซึ่งผลรวมเป็น j-xi (เลือก xi มารวมกับผลบวก) 
	3.และถ้า j<xi หมายความว่า ถ้าเลือก x มารวมผลรวม จะทำให้ค่า j ที่ต้องการเกิน จึงไม่สามารถเลือก x มารวม
	ถ้าสองข้อนี้ไม่เป็นจริง ก็จะไม่สามารถเกิดซับเซตของ x1-xi-1 ซึ่งมีผลรวมเป็น  j ได้
	
	จึงสรุปเป็น 	s(i,j)=s(i-1,j-xi) || s(i-1,j) ; j>=xi
	          		s(i,j)=s(i-1,j) ; j<xi
			s(0,j)=false สำหรับทุก j!=0
			s(i,0)=true